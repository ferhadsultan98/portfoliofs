/* eslint-disable react/prop-types */
import { useState, useEffect } from "react";
import { database, ref, onValue, push } from "../../../../firebase/Firebase";
import "./AdminChatRight.scss";
import { MdOutlineMoodBad } from "react-icons/md";
import { IoIosSend } from "react-icons/io";
import { FaRegSmileWink } from "react-icons/fa";
import { BsEmojiSunglasses } from "react-icons/bs";
import Modal from "react-modal";

Modal.setAppElement("#root");

export default function AdminChatRight({ selectedUser }) {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);

  const emojis = [
    "üòÇ",
    "üòä",
    "üòç",
    "ü•∫",
    "üòé",
    "üò≠",
    "üòú",
    "üò¢",
    "ü§î",
    "üò°",
    "üòÖ",
    "üòÜ",
    "üòè",
    "ü•≥",
    "ü§ó",
    "üíÄ",
    "üôÑ",
    "üòá",
    "ü§©",
    "üëç",
    "üëé",
    "üíî",
    "‚ù§Ô∏è",
    "üî•",
    "‚ú®",
    "üí•",
    "üåà",
    "üéâ",
    "üéÅ",
    "üçï",
    "üçî",
    "üçü",
    "üç©",
    "üç∞",
    "üç´",
    "üçª",
    "ü•Ç",
    "üç∑",
    "ü•§",
    "üåç",
    "üåû",
    "üåù",
    "üå∫",
    "üå∑",
    "üê∂",
    "üê±",
    "üê≠",
    "üêØ",
    "ü¶Ñ",
    'üíª', 'üë®‚Äçüíª', 'üë©‚Äçüíª', 'üñ•Ô∏è', 'üì±', 'üì≤', 'üñ±Ô∏è', '‚å®Ô∏è', '‚öôÔ∏è', 'üõ†Ô∏è', 
  'üßë‚Äçüé®', 'üé®', 'üîß', 'üåê', 'üöÄ', '‚ö°', 'üîç', 'üí°', 'üîí', 'üîë',
  'üñãÔ∏è', 'üìù', 'üóÇÔ∏è', 'üóÉÔ∏è', 'üíæ', 'üí≥', 'üßë‚Äçüíº', 'üëæ', 'üñ§', 'üíé',
  'üåü', 'üî•', '‚ú®', 'üåÄ', 'üí¨', 'üì•', 'üì§', 'üìä', 'üî¢', 'üìà', 'üìâ', 
  'üöß', 'üõë', 'üéØ', 'üë®‚Äçüíªüîß', 'üí¨', 'üìù', 'üå±', 'üöß', 'üîÑ', 'üåà'
  ];

  useEffect(() => {
    if (selectedUser) {
      const userEmailKey = selectedUser.email.replace(".", ",");
      const messagesRef = ref(database, `users/${userEmailKey}/messages`);

      const unsubscribe = onValue(messagesRef, (snapshot) => {
        if (snapshot.exists()) {
          const messagesData = Object.values(snapshot.val());
          setMessages(messagesData);
        } else {
          setMessages([]);
        }
      });

      return () => unsubscribe();
    }
  }, [selectedUser]);

  const handleSendMessage = () => {
    if (newMessage.trim() === "" || !selectedUser) return;

    const userEmailKey = selectedUser.email.replace(".", ",");
    const messagesRef = ref(database, `users/${userEmailKey}/messages`);

    const messageData = {
      sender: "system",
      text: newMessage,
      timestamp: Date.now(),
    };

    push(messagesRef, messageData)
      .then(() => {
        setNewMessage("");
      })
      .catch((error) => {
        console.error("Mesaj g√∂nderilemedi:", error);
      });
  };

  const handleQuickReply = (reply) => {
    setNewMessage(reply);
  };

  const formatTimestamp = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleString("tr-TR", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    });
  };

  // Modal a√ßma/kapama fonksiyonlarƒ±
  const openModal = () => setIsModalOpen(true);
  const closeModal = () => setIsModalOpen(false);

  // Emoji se√ßildiƒüinde √ßalƒ±≈üacak fonksiyon
  const handleEmojiSelect = (emoji) => {
    setNewMessage((prev) => prev + emoji); // Input‚Äôa emojiyi ekle
    closeModal(); // Se√ßimden sonra modal kapanƒ±r
  };

  return (
    <div className="adminChatRightContainer">
      {selectedUser ? (
        <>
          <div className="adminChatRightHeader">
            <h2>{selectedUser.name}</h2>
          </div>

          <div className="adminChatRightMessages">
            {messages.length > 0 ? (
              messages.map((message, index) =>
                message.sender === "user" ? (
                  <div
                    key={index}
                    className="message userMessage"
                    title={formatTimestamp(message.timestamp)}
                  >
                    <h6 style={{ fontWeight: "800" }}>{message.text}</h6>
                  </div>
                ) : (
                  <div
                    key={index}
                    className="message systemMessage"
                    title={formatTimestamp(message.timestamp)}
                  >
                    <h6 style={{ fontWeight: "800" }}>{message.text}</h6>
                  </div>
                )
              )
            ) : (
              <p>
                You haven‚Äôt received any messages yet...
                <i>
                  <MdOutlineMoodBad />
                </i>
              </p>
            )}
            <div className="quickRepliesContainer">
              <button
                onClick={() =>
                  handleQuickReply("Salam, siz…ô nec…ô k√∂m…ôk ed…ô bil…ôr…ôm?")
                }
                className="quickReplyButton"
              >
                Salam
              </button>
              <button
                onClick={() =>
                  handleQuickReply(
                    "Sualƒ±nƒ±zƒ± biraz daha …ôtraflƒ± izah ed…ô bil…ôrsinizmi?"
                  )
                }
                className="quickReplyButton"
              >
                ∆ètraflƒ±
              </button>
              <button
                onClick={() =>
                  handleQuickReply(
                    "D…ôrhal yoxlayƒ±ram, bir saniy…ô g√∂zl…ôyin z…ôhm…ôt olmasa."
                  )
                }
                className="quickReplyButton"
              >
                Yoxlama
              </button>
              <button
                onClick={() =>
                  handleQuickReply(
                    "T…ô≈ü…ôkk√ºrl…ôr, siz…ô …ôn qƒ±sa zamanda cavab ver…ôc…ôy…ôm."
                  )
                }
                className="quickReplyButton"
              >
                T…ô≈ü…ôkk√ºr
              </button>
              <button
                onClick={() =>
                  handleQuickReply(
                    "Probleminizi h…ôll etm…ôk √º√ß√ºn …ôlimd…ôn g…ôl…ôni ed…ôc…ôy…ôm."
                  )
                }
                className="quickReplyButton"
              >
                H…ôll
              </button>
            </div>
          </div>

          <div className="adminRightChatInputContainer">
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="Type a message..."
              className="adminRightChatInput"
              onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
            />
            <button className="chatEmojiButton" onClick={openModal}>
              <i>
                <BsEmojiSunglasses />
              </i>
            </button>
            <button
              onClick={handleSendMessage}
              className="adminRightChatSendButton"
            >
              <i>
                <IoIosSend />
              </i>
            </button>
          </div>

          {/* Emoji Modal */}
          <Modal
            isOpen={isModalOpen}
            onRequestClose={closeModal}
            style={{
              content: {
                top: "50%",
                left: "50%",
                right: "auto",
                bottom: "auto",
                marginRight: "-50%",
                transform: "translate(-50%, -50%)",
                width: "300px",
                padding: "20px",
                borderRadius: "8px",
              },
              overlay: { backgroundColor: "rgba(0, 0, 0, 0.5)" },
            }}
          >
            <h3>Emoji Se√ß</h3>
            <div style={{ display: "flex", flexWrap: "wrap", gap: "10px" }}>
              {emojis.map((emoji, index) => (
                <span
                  key={index}
                  onClick={() => handleEmojiSelect(emoji)}
                  style={{
                    fontSize: "24px",
                    cursor: "pointer",
                    padding: "5px",
                    borderRadius: "4px",
                    background: "#f0f0f0",
                    transition: "background 0.2s",
                  }}
                  onMouseEnter={(e) => (e.target.style.background = "#e0e0e0")}
                  onMouseLeave={(e) => (e.target.style.background = "#f0f0f0")}
                >
                  {emoji}
                </span>
              ))}
            </div>
            <button
              onClick={closeModal}
              style={{ marginTop: "20px", padding: "5px 10px" }}
            >
              Kapat
            </button>
          </Modal>
        </>
      ) : (
        <p>
          Choose a user to begin the conversation{" "}
          <FaRegSmileWink fontSize="1.4rem" />
        </p>
      )}
    </div>
  );
}
